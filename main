{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_HVGYJL4ExLL",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3ac8ff51-58cb-41c1-bab8-9cdfa7f33b02"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "coach/video1_out.avi\n",
            "Ignoring empty camera frame.\n",
            "student/video2_out.avi\n",
            "Ignoring empty camera frame.\n"
          ]
        }
      ],
      "source": [
        "import mediapipe as mp\n",
        "import cv2\n",
        "import os\n",
        "import numpy as np\n",
        "from google.colab.patches import cv2_imshow\n",
        "import sys\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn import metrics\n",
        "from sklearn.model_selection import ParameterGrid\n",
        "from sklearn.cluster import KMeans\n",
        "\n",
        "def set_up_pose_detection_model():\n",
        "    drawing = mp.solutions.drawing_utils\n",
        "    drawing_style = mp.solutions.drawing_styles\n",
        "    pose = mp.solutions.pose\n",
        "    return drawing, pose\n",
        "\n",
        "def get_video_writer(image_name, video_path):\n",
        "    basename = os.path.basename(video_path)\n",
        "    filename, extension = os.path.splitext(basename)\n",
        "    size = (480, 640)\n",
        "    make_directory(image_name)\n",
        "    out = cv2.VideoWriter(f\"{image_name}/{filename}_out.avi\", cv2.VideoWriter_fourcc('M', 'J', 'P', 'G'), 5, size)\n",
        "    print(f\"{image_name}/{filename}_out.avi\")\n",
        "    return out\n",
        "\n",
        "def make_directory(name:str):\n",
        "    if not os.path.isdir(name):\n",
        "        os.mkdir(name)\n",
        "\n",
        "def resize_image(image):\n",
        "    h, w, c = image.shape\n",
        "    downsize = (w//2, h//2)\n",
        "    resize_img = cv2.resize(image, downsize)\n",
        "    return resize_img, w//2, h//2\n",
        "\n",
        "def pose_process_image(image, pose):\n",
        "    image.flags.writeable = False\n",
        "    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n",
        "    results = pose.process(image)\n",
        "\n",
        "    image.flags.writeable = True\n",
        "    image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)\n",
        "    return image, results\n",
        "\n",
        "def plot_angles_from_frames(mp_pose, landmarks, image, h, w, max_angle_right = 0):\n",
        "    angles = []\n",
        "    val = 50\n",
        "    angle, image = plot_angle(mp_pose.PoseLandmark.LEFT_SHOULDER.value, mp_pose.PoseLandmark.LEFT_ELBOW.value,\n",
        "                              mp_pose.PoseLandmark.LEFT_WRIST.value, landmarks, image, h, w + val)\n",
        "    angles.append(angle)\n",
        "    angle, image = plot_angle(mp_pose.PoseLandmark.RIGHT_SHOULDER.value, mp_pose.PoseLandmark.RIGHT_ELBOW.value,\n",
        "                              mp_pose.PoseLandmark.RIGHT_WRIST.value, landmarks, image, h, w - val)\n",
        "    angles.append(angle)\n",
        "    angle, image = plot_angle(mp_pose.PoseLandmark.LEFT_HIP.value, mp_pose.PoseLandmark.LEFT_KNEE.value,\n",
        "                              mp_pose.PoseLandmark.LEFT_ANKLE.value, landmarks, image, h, w + val)\n",
        "    angles.append(angle)\n",
        "    angle, image = plot_angle(mp_pose.PoseLandmark.RIGHT_HIP.value, mp_pose.PoseLandmark.RIGHT_KNEE.value,\n",
        "                              mp_pose.PoseLandmark.RIGHT_ANKLE.value, landmarks, image, h, w - val)\n",
        "    angles.append(angle)\n",
        "    angle, image = plot_angle(mp_pose.PoseLandmark.LEFT_SHOULDER.value, mp_pose.PoseLandmark.LEFT_HIP.value,\n",
        "                              mp_pose.PoseLandmark.LEFT_KNEE.value, landmarks, image, h, w + val)\n",
        "    angles.append(angle)\n",
        "    angle, image = plot_angle(mp_pose.PoseLandmark.RIGHT_SHOULDER.value, mp_pose.PoseLandmark.RIGHT_HIP.value,\n",
        "                              mp_pose.PoseLandmark.RIGHT_KNEE.value, landmarks, image, h, w - val)\n",
        "    angles.append(angle)\n",
        "    angle_left, image = plot_angle(mp_pose.PoseLandmark.LEFT_WRIST.value, mp_pose.PoseLandmark.LEFT_SHOULDER.value,\n",
        "                              mp_pose.PoseLandmark.LEFT_HIP.value, landmarks, image, h, w + val)\n",
        "    angles.append(angle_left)\n",
        "    angle_right, image = plot_angle(mp_pose.PoseLandmark.RIGHT_WRIST.value, mp_pose.PoseLandmark.RIGHT_SHOULDER.value,\n",
        "                              mp_pose.PoseLandmark.RIGHT_HIP.value, landmarks, image, h, w - val)\n",
        "    angles.append(angle_right)\n",
        "    max_angle_right = max(max_angle_right, angle_right)\n",
        "    return angles, max_angle_right\n",
        "\n",
        "def plot_angle(p1, p2, p3, landmarks, image, h, w):\n",
        "    orgs1 = [landmarks[p1].x, landmarks[p1].y]\n",
        "    orgs2 = [landmarks[p2].x, landmarks[p2].y]\n",
        "    orgs3 = [landmarks[p3].x, landmarks[p3].y]\n",
        "    angle = calculate_angle(orgs1, orgs2, orgs3)\n",
        "    coord = np.multiply(orgs2, [w, h])\n",
        "    draw_angle(tuple(coord.astype(int)), image, angle)\n",
        "    return angle, image\n",
        "\n",
        "def calculate_angle(a, b, c):\n",
        "    a = np.array(a)\n",
        "    b = np.array(b)\n",
        "    c = np.array(c)\n",
        "\n",
        "    radians = np.arctan2(c[1] - b[1], c[0] - b[0]) - np.arctan2(a[1] - b[1], a[0] - b [0])\n",
        "    angle = np.abs(radians * 180.0 / np.pi)\n",
        "\n",
        "    if angle > 180.0:\n",
        "        angle = 360 - angle\n",
        "\n",
        "    return round(angle, 1)\n",
        "\n",
        "def draw_angle(org:tuple, image, angle):\n",
        "    font = cv2.FONT_HERSHEY_SIMPLEX\n",
        "    font_scale = 2\n",
        "    color = (0, 255, 0)\n",
        "    thickness = 2\n",
        "    cv2.putText(image, str(angle), org, font, font_scale, color, thickness)\n",
        "    return image\n",
        "\n",
        "def add_stage(frames, max_value):\n",
        "    stage = 1\n",
        "    for frame in frames:\n",
        "        if frame[-1] == max_value:\n",
        "            stage = 0\n",
        "        frame.append(stage)\n",
        "    return frames\n",
        "\n",
        "def draw_landmarks(results, mp_drawing, mp_pose, image):\n",
        "    landmark_list = results.pose_landmarks.landmark\n",
        "    for id, lm in enumerate(landmark_list):\n",
        "        if id in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 17, 18, 19, 20, 21, 22, 29, 30, 31, 32]:\n",
        "          landmark_list[id].visibility = 0\n",
        "    mp_drawing.draw_landmarks(image, results.pose_landmarks, mp_pose.POSE_CONNECTIONS,\n",
        "                              mp_drawing.DrawingSpec(color = (255, 0, 0), thickness = 2, circle_radius = 2),\n",
        "                              mp_drawing.DrawingSpec(color = (245, 66, 230), thickness = 2, circle_radius = 2))\n",
        "    return image\n",
        "\n",
        "def get_frames_angles(image_name:str, video_path:str)->tuple:\n",
        "\n",
        "    mp_drawing, mp_pose = set_up_pose_detection_model()\n",
        "    cap = cv2.VideoCapture(video_path)\n",
        "    out = get_video_writer(image_name,video_path)\n",
        "    img_count = 0\n",
        "    output_images = []\n",
        "    frames= []\n",
        "    max_angle_right = 0\n",
        "    with mp_pose.Pose(\n",
        "        min_detection_confidence=0.5,\n",
        "        min_tracking_confidence=0.5) as pose:\n",
        "      while cap.isOpened():\n",
        "        success, image = cap.read()\n",
        "        if not success:\n",
        "          print(\"Ignoring empty camera frame.\")\n",
        "          # If loading a video, use 'break' instead of 'continue'.\n",
        "          break\n",
        "        image,h,w = resize_image(image)\n",
        "        image, results =pose_process_image(image, pose)\n",
        "        #try:\n",
        "        landmarks = results.pose_landmarks.landmark\n",
        "        angles , max_angle_right = plot_angles_from_frames(mp_pose, landmarks, image, h, w, max_angle_right)\n",
        "        frames.append(angles)\n",
        "        image = draw_landmarks(results, mp_drawing,mp_pose,image)\n",
        "        out.write(image)\n",
        "        #cv2.imshow(\"window\", image) # in python IDE, change cv2_imshow to cv2.imshow('title of frame/image', image)\n",
        "        outImageFile = f\"{image_name}/{image_name}{img_count}.jpg\"\n",
        "        cv2.imwrite(outImageFile, image)\n",
        "        img_count += 1\n",
        "        #except ValueError:\n",
        "            #print(\"#########################\")\n",
        "        #    print(\"Error!\")\n",
        "        #    print(ValueError)\n",
        "        #    pass\n",
        "        if cv2.waitKey(5) & 0xFF == 27:\n",
        "          break\n",
        "\n",
        "    cap.release()\n",
        "    out.release()\n",
        "\n",
        "    return frames, max_angle_right\n",
        "\n",
        "coach_frames, max_angle_right = get_frames_angles(image_name = \"coach\", video_path = r\"\")\n",
        "coach_frames = add_stage(coach_frames, max_angle_right)\n",
        "\n",
        "student_frames, max_angle_right = get_frames_angles(image_name = \"student\", video_path = r\"\")\n",
        "student_frames = add_stage(student_frames, max_angle_right)"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "08AN0tIAoBU2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# New Section"
      ],
      "metadata": {
        "id": "Lr4OxZBJkXeq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for frame in coach_frames:\n",
        "    print(frame)\n",
        "print(len(coach_frames))"
      ],
      "metadata": {
        "id": "HRHz5LigVpkn",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c143c2b9-d66b-48ea-9f87-38d0e352d59e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for frame in student_frames:\n",
        "   print(frame)\n",
        "print(len(student_frames))"
      ],
      "metadata": {
        "id": "pyV31-esV_9I",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "98ccda11-da12-4bdc-ed6e-b3ccda4c6319"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.cluster import KMeans\n",
        "import numpy as np\n",
        "\n",
        "student_n_cluster = 5\n",
        "print(student_n_cluster)\n",
        "X = np.array(student_frames)\n",
        "kmeans_student = KMeans(n_clusters=student_n_cluster, random_state=0.fit(X)\n",
        "print(kmeans_student.labels_)"
      ],
      "metadata": {
        "id": "LRSVBdXrVhb8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 135
        },
        "outputId": "87b0c14b-59d9-47a0-87d7-f92c3244baa8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-6-e91972e5603c>\"\u001b[0;36m, line \u001b[0;32m7\u001b[0m\n\u001b[0;31m    kmeans_student = KMeans(n_clusters=student_n_cluster, random_state=0.fit(X)\u001b[0m\n\u001b[0m                                                                           ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.cluster import KMeans\n",
        "import numpy as np\n",
        "\n",
        "n_cluster_coach = 5\n",
        "X = np.array(coach_frames)\n",
        "kmeans_coach = KMeans(n_clusters=n_cluster_coach, random_state=0.fit(X)\n",
        "print(kmeans_coach.labels_)"
      ],
      "metadata": {
        "id": "Dye-1inoWpKg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import sys\n",
        "\n",
        "def get_nearest_neighbor(image, indexes, frames):\n",
        "  a = np.array(image)\n",
        "  min_dist = sys.maxsize\n",
        "  nearrest = indexes[0]\n",
        "  for idx in indexes:\n",
        "    b = np.array(frames[idx])\n",
        "    dist = np.linalg.norm(a-b)\n",
        "    if min_dist > dist:\n",
        "      nearest = idx\n",
        "      min_dist = dist\n",
        "      print(min_dist, nearest)\n",
        "    return nearest\n",
        "\n",
        "from IPython.display import Image, display\n",
        "from random import radint\n",
        "\n",
        "student_cluster = []\n",
        "start = 0\n",
        "for i in range(1, len(kmeans_student.labels_)):\n",
        "  if kmeans_student.labels_[i] != kmeans_student.labels_[i-1]:\n",
        "    student_cluster.append({'label':kmeans_student.labels_[i-1], 'start':start, 'end':i})\n",
        "\n",
        "print(student_cluster)\n",
        "used = set()\n",
        "for label in (student_cluster):\n",
        "  if label['label'] in used:\n",
        "    continue\n",
        "  used.add(label['label'])\n",
        "  print('label:' , label['label'])\n",
        "  index_student = np.where(kmeans_student.labels_ = label['label'])\n",
        "  rand=len(index_student)//2\n",
        "  print('student image ', index_student[0][rand])\n",
        "  predict = kmeans_coach.predict([student_frames[index_student[0][rand]]])\n",
        "  orubt('predict:',predit)\n",
        "  indexes_frame = np.where(kmeans_coach.labels_ == predict[0])\n",
        "  nearest = get_nearest_neighbor(student_frames[index_student[0][rand]], indexes_frame[0] , coach_frames)\n",
        "  print('coach', nearest)\n",
        "  display(Image(f'student/student{index-student[0][rand]+1}.jpg'))\n",
        "  display(Image(f'coach/coach{nearest}.jpg'))"
      ],
      "metadata": {
        "id": "MPe-IK15W9VC"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}